

import * as SQLite from "expo-sqlite";
import { CartItemSimple, User } from './../types/types'; // S·ª¨A 1: Import types m·ªõi

export type UserProps = User; // Gi·ªØ t√™n 'UserProps' theo y√™u c·∫ßu

// ... (code 'db' v√† 'getDb' gi·ªØ nguy√™n) ...
let db: SQLite.SQLiteDatabase | null = null;

// FUNCTION: Reset database khi g·∫∑p l·ªói
export const resetDatabase = async () => {
    try {
        if (db) {
            await db.closeAsync();
            db = null;
        }
        await SQLite.deleteDatabaseAsync("UserDB.db");
        console.log("üóëÔ∏è ƒê√£ x√≥a database c≈©");
        // T·∫°o l·∫°i database m·ªõi
        db = await initDatabase();
        console.log("‚úÖ ƒê√£ t·∫°o database m·ªõi");
        return true;
    } catch (e) {
        console.error("‚ùå L·ªói khi reset database:", e);
        return false;
    }
};

const initDatabase = async () => {
    const dbInstance = await SQLite.openDatabaseAsync("UserDB.db");

    // T·∫°o b·∫£ng Users v·ªõi _id ƒë·ªÉ l∆∞u MongoDB ID
    await dbInstance.execAsync(`
    CREATE TABLE IF NOT EXISTS Users (
      id TEXT PRIMARY KEY,
      fullName TEXT NOT NULL,
      address TEXT NOT NULL,
      phone TEXT NOT NULL,
      username TEXT UNIQUE NOT NULL,
      password TEXT NOT NULL,
      payment TEXT NOT NULL,
      favorite TEXT,
      _id TEXT
    );
  `);

    // MIGRATION: Th√™m c·ªôt _id n·∫øu ch∆∞a c√≥ (ƒë·ªÉ l∆∞u MongoDB ID)
    try {
        await dbInstance.execAsync(`ALTER TABLE Users ADD COLUMN _id TEXT;`);
        console.log("‚úÖ ƒê√£ th√™m c·ªôt _id v√†o b·∫£ng Users");
    } catch (e: any) {
        if (e.message && e.message.includes("duplicate column")) {
            console.log("‚ÑπÔ∏è C·ªôt _id ƒë√£ t·ªìn t·∫°i");
        } else {
            console.error("‚ö†Ô∏è L·ªói khi th√™m c·ªôt _id:", e);
        }
    }

    // MIGRATION: Th√™m c·ªôt image n·∫øu ch∆∞a c√≥ (ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi database c≈©)
    try {
        await dbInstance.execAsync(`ALTER TABLE Users ADD COLUMN image TEXT;`);
        console.log("‚úÖ ƒê√£ th√™m c·ªôt image v√†o b·∫£ng Users");
    } catch (e: any) {
        if (e.message && e.message.includes("duplicate column")) {
            console.log("‚ÑπÔ∏è C·ªôt image ƒë√£ t·ªìn t·∫°i");
        } else {
            console.error("‚ö†Ô∏è L·ªói khi th√™m c·ªôt image:", e);
        }
    }

    // MIGRATION: Th√™m c·ªôt favorite n·∫øu ch∆∞a c√≥
    try {
        await dbInstance.execAsync(`ALTER TABLE Users ADD COLUMN favorite TEXT;`);
        console.log("‚úÖ ƒê√£ th√™m c·ªôt favorite v√†o b·∫£ng Users");
    } catch (e: any) {
        if (e.message && e.message.includes("duplicate column")) {
            console.log("‚ÑπÔ∏è C·ªôt favorite ƒë√£ t·ªìn t·∫°i");
        } else {
            console.error("‚ö†Ô∏è L·ªói khi th√™m c·ªôt favorite:", e);
        }
    }

    // (M·ªöI) B·∫£ng CARTITEMS ƒë·ªÉ t·∫°o m·ªëi quan h·ªá
    await dbInstance.execAsync(`
    CREATE TABLE IF NOT EXISTS CartItems (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id TEXT NOT NULL,
      item_id TEXT NOT NULL,
      quantity INTEGER NOT NULL,
      FOREIGN KEY (user_id) REFERENCES Users (id) ON DELETE CASCADE
    );
  `);

    return dbInstance;
};

const getDb = async () => {
    if (db) return db;
    db = await initDatabase();
    return db;
};

// --- H√ÄM HELPER PARSE/STRINGIFY ---
// (H√†m n√†y ch·ªâ c√≤n d√πng cho 'favorite')
const parseUserFromDb = (dbUser: any): User | null => {
    if (!dbUser) return null;
    return {
        ...dbUser,
        _id: dbUser._id || undefined, // L·∫•y _id t·ª´ SQLite (n·∫øu c√≥)
        favorite: dbUser.favorite ? JSON.parse(dbUser.favorite) : [],
        cart: [], // S·∫Ω ƒë∆∞·ª£c ƒëi·ªÅn v√†o sau
    };
};

export const fetchInitialUser = async (): Promise<User | null> => {
    const db = await getDb();

    // 1. L·∫•y th√¥ng tin user c∆° b·∫£n (ch·ªâ t·ª´ database, kh√¥ng t·∫°o m·∫´u)
    const dbUser = await db.getFirstAsync<any>(
        "SELECT * FROM Users LIMIT 1" // L·∫•y user ƒë·∫ßu ti√™n n·∫øu c√≥
    );

    const user = parseUserFromDb(dbUser);

    // N·∫øu kh√¥ng c√≥ user trong database, tr·∫£ v·ªÅ null
    // User ph·∫£i ƒëƒÉng nh·∫≠p ho·∫∑c ƒëƒÉng k√Ω ƒë·ªÉ c√≥ d·ªØ li·ªáu
    if (!user) {
        console.log("üì≠ Kh√¥ng c√≥ user trong database.");
        console.log("üí° Vui l√≤ng ƒëƒÉng nh·∫≠p ho·∫∑c ƒëƒÉng k√Ω t√†i kho·∫£n.");
        return null;
    }

    console.log("‚úÖ ƒê√£ t√¨m th·∫•y user:", user.username);
    console.log("   User ID (Local):", user.id);
    console.log("   User ID (MongoDB):", user._id || "N/A");

    // 2. L·∫•y Cart Items c·ªßa user ƒë√≥
    const cartItems = await db.getAllAsync<CartItemSimple>(
        "SELECT item_id as item, quantity FROM CartItems WHERE user_id = ?",
        [user.id]
    );

    user.cart = cartItems;
    return user;
};

/**
 * (C·∫¨P NH·∫¨T) L∆∞u user (khi Login/Register)
 * ƒê√¢y l√† m·ªôt giao d·ªãch (transaction)
 */
export const saveUserToDb = async (user: User): Promise<User | null> => {
    const db = await getDb();
    const { cart, ...userData } = user; // Gi·ªØ l·∫°i _id ƒë·ªÉ l∆∞u v√†o SQLite

    try {
        await db.withTransactionAsync(async () => {
            // 1. L∆∞u th√¥ng tin c∆° b·∫£n v√†o b·∫£ng Users (BAO G·ªíM _id)
            await db.runAsync(
                `INSERT OR REPLACE INTO Users (id, fullName, address, phone, username, password, payment, image, favorite, _id) 
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
                [
                    userData.id,
                    userData.fullName,
                    userData.address,
                    userData.phone,
                    userData.username,
                    userData.password,
                    userData.payment,
                    userData.image || null,
                    JSON.stringify(userData.favorite || []),
                    userData._id || null // L∆∞u MongoDB _id
                ]
            );

            console.log("üíæ ƒê√£ l∆∞u user v√†o SQLite v·ªõi _id:", userData._id);

            // 2. X√≥a t·∫•t c·∫£ CartItems c≈© c·ªßa user n√†y
            await db.runAsync("DELETE FROM CartItems WHERE user_id = ?", [user.id]);

            // 3. Th√™m CartItems m·ªõi
            for (const item of cart) {
                await db.runAsync(
                    "INSERT INTO CartItems (user_id, item_id, quantity) VALUES (?, ?, ?)",
                    [user.id, item.item, item.quantity]
                );
            }
        });
        return user; // Tr·∫£ v·ªÅ user ƒë·∫ßy ƒë·ªß (ƒë√£ bao g·ªìm cart v√† _id)
    } catch (e) {
        console.error("L·ªói khi l∆∞u user v√†o CSDL (transaction):", e);
        return null;
    }
};

/**
 * (C·∫¨P NH·∫¨T) Ch·ªânh s·ª≠a User (Edit Profile, Change Pass, Update Cart/Favorite)
 */
export const editUserInDb = async (
    userId: string,
    updatedData: Partial<User>
): Promise<User | null> => {
    const db = await getDb();

    try {
        // S·ª¨A L·ªñI TRANSACTION:
        // B·ªçc TO√ÄN B·ªò logic trong M·ªòT giao d·ªãch
        await db.withTransactionAsync(async () => {

            // 1. X·ª≠ l√Ω c√°c tr∆∞·ªùng trong b·∫£ng Users (fullName, favorite, v.v.)
            const userFieldsToUpdate: Partial<any> = { ...updatedData };
            delete userFieldsToUpdate.cart; // X√≥a cart, v√¨ n√≥ ƒë∆∞·ª£c x·ª≠ l√Ω ri√™ng

            // Stringify 'favorite' n·∫øu n√≥ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            if (userFieldsToUpdate.favorite) {
                userFieldsToUpdate.favorite = JSON.stringify(userFieldsToUpdate.favorite);
            }

            if (Object.keys(userFieldsToUpdate).length > 0) {
                const setClause = Object.entries(userFieldsToUpdate)
                    .map(([key]) => `${key} = ?`)
                    .join(", ");
                const values = [...Object.values(userFieldsToUpdate), userId];
                // Ch·∫°y l·ªánh UPDATE b√™n trong giao d·ªãch
                await db.runAsync(`UPDATE Users SET ${setClause} WHERE id = ?`, values);
            }

            // 2. X·ª≠ l√Ω ri√™ng cho 'cart' (N·∫øu 'cart' ƒë∆∞·ª£c truy·ªÅn v√†o)
            if (updatedData.cart) {
                // X√≥a cart c≈©
                await db.runAsync("DELETE FROM CartItems WHERE user_id = ?", [userId]);
                // Th√™m cart m·ªõi
                for (const item of updatedData.cart as CartItemSimple[]) {
                    await db.runAsync(
                        "INSERT INTO CartItems (user_id, item_id, quantity) VALUES (?, ?, ?)",
                        [userId, item.item, item.quantity]
                    );
                }
            }
        }); // <-- Giao d·ªãch k·∫øt th√∫c ·ªü ƒë√¢y

        // 3. L·∫•y l·∫°i to√†n b·ªô user sau khi giao d·ªãch th√†nh c√¥ng
        const updatedUserFromDb = await db.getFirstAsync<any>(
            "SELECT * FROM Users WHERE id = ?",
            [userId]
        );
        const finalUser = parseUserFromDb(updatedUserFromDb);
        if (!finalUser) return null;

        const cartItems = await db.getAllAsync<CartItemSimple>(
            "SELECT item_id as item, quantity FROM CartItems WHERE user_id = ?",
            [userId]
        );
        finalUser.cart = cartItems;
        return finalUser;

    } catch (e) {
        console.error("L·ªói khi edit user CSDL:", e);
        return null; // Tr·∫£ v·ªÅ null s·∫Ω k√≠ch ho·∫°t "Failed to update user in DB"
    }
};

// (H√†m 'clearUserFromDb' gi·ªØ nguy√™n nh∆∞ c≈© n·∫øu b·∫°n c√≥)